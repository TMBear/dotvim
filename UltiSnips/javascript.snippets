snippet for( "javascript for loop"
for(var $1; $1 < $2; $1++) {
	$0
}
endsnippet

snippet f "javascript function"
function($1) {
	$0
}
endsnippet

snippet mod "module pattern"
(function(${1}) {
	'use strict';
	$0
	${VISUAL}
})($1);
endsnippet

snippet req "node require"
var ${1} = require('${2:$1}');
$0
endsnippet

snippet { "open braket" i
{
	$1
}$0
endsnippet

snippet [ "open braket" i
[
	$1
]$0
endsnippet

snippet switch "switch"
switch($1) {
	case $2:
		$3
		break;
	default:
		// default case
}
endsnippet

snippet .then "promise.then" i
.then(function($1) {
	$2
})$0
endsnippet


# testing snippets

snippet desc "testing describe"
describe("$1", function() {
	$0
});
endsnippet

snippet it "testing it"
it("$1", function() {
	$0
});
endsnippet

snippet runs "jasmine runs function"
runs(function() {
	$1
});
$0
endsnippet

snippet waits "jasmine waits for"
waitsFor(function() {
	$1
});
$0
endsnippet

snippet befm "ng before each load module"
beforeEach(module("$1"));
$0
endsnippet

snippet befi "ng before each inject"
beforeEach(inject(function($1) {
	$2
}));
$0
endsnippet

snippet dir "ng directive" i
directive('$1', function() {
	return {
		restrict: 'AE',
		require: 'ctrl|^parentCtrl|?optionalCtrl|?^optionalParentCtrl',
		transclude: false|true|"element",
		link: function(\$scope, \$element, \$attrs, ctrl, \$transclude) {
			$3
		},
		controller: function(\$scope, \$element, \$attrs) {
			$4
		},
	};
});
$0
endsnippet

snippet .factory "ng factory" i
.factory('${1:serviceName}', [
	${2:dependicies},
	function(`!p deps = t[2].split(','); snip.rv = ", ".join([d.strip(' \'"') for d in deps])`) {
		$0
	}
]);
endsnippet

snippet .controller "ng controller" i
.controller('${1:serviceName}Ctrl', [
	'\$scope', ${2:dependencies},
	function($scope, `!p deps = t[2].split(','); snip.rv = ", ".join([d.strip(' \'"') for d in deps])`) {
		$0
	}
]);
endsnippet

snippet .config "ng module config block" i
.config([
	'${2:dependencies}',
	function(`!p deps = t[2].split(','); snip.rv = ", ".join([d.strip(' \'"') for d in deps])`) {
		$0
	}
]);
endsnippet

snippet debug "debug line"
console.log($1);
endsnippet

snippet .state "ui router state"
.state('${1:name}', {
	url: '/$1',
	templateUrl: 'templates/$1.html',
	controller: '`!p snip.rv = t[1].capitalize()`Ctrl',$0
})


endsnippet

snippet ngunit "angular unit test"
describe('The \`$1\` service', function() {
  beforeEach(module('$1'));

  var s;

  beforeEach(inject(function($1) {
    s = $1;
  }));


  it('$2', function() {
    assert.isTrue();
  });

});
endsnippet

snippet ngctrlunit "angular unit test for controllers"
describe('The \`$1Ctrl\` service', function() {
  beforeEach(module('$1Ctrl'));

  var c, $scope, $httpBackend;

  beforeEach(inject(function($controller, _$httpBackend_) {
    $scope = {};
    c = $controller('$1Ctrl', {$scope: $scope});
    $httpBackend = _$httpBackend_;
  }));


  it('$2', function() {
    $httpBackend.expectGET('/example/url/')
    .respond(200, {data: exampleResponse});
    $3
    assert.isTrue();
  });

});
endsnippet

snippet ngmod "angular module"
angular.module("$1", [
 ${2:dependencies}
])

/**
 * $3
 */
.`!p snip.rv = ('controller' if t[1].endswith('Ctrl') else ('directive' if t[1].endswith('Directive') else ('filter' if t[1].endswith('Filter') else 'service')))`("$1", function(`!p deps = t[2].replace('\n', '').split(','); snip.rv = ", ".join([d.strip(' \'"') for d in deps]).rstrip(', ')`) {
  $4
});
endsnippet
